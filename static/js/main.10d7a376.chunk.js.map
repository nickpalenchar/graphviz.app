{"version":3,"sources":["../node_modules/encoding/lib sync","io.js","FeatureSwitch.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","REACT_APP_WS_SCHEME","process","Channel","url","_this","this","Object","classCallCheck","events","_socket","WebSocket","concat","tryReconnect","onopen","ev","connection","onclose","close","setTimeout","onmessage","_JSON$parse","JSON","parse","data","event","fn","send","stringify","Feature","react_default","a","createElement","props","children","Component","theme","global","font","family","size","height","AppBar","Box","assign","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","App","state","showSidebar","graphSvg","refreshId","graphData","editor","channel","emmit","newValue","_this2","parseGraph","graph","axios","headers","Content-Type","method","responseType","then","response","window","URL","createObjectURL","Blob","link","document","href","setAttribute","body","appendChild","click","_this3","on","querySelectorAll","innerHTML","Grommet","App_AppBar","Heading","level","margin","Button","icon","Menu","onClick","setState","prevState","flex","overflow","horizontal","alignContent","lib_default","mode","fontSize","onChange","name","width","editorProps","$blockScrolling","value","boarder","as","FeatureSwitch","switch","label","sendGraphToExport","getGraphData","Collapsible","open","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10d7a376.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 203;","/* Author: Nick Palenchar\n * websocket connection\n */\nconst { REACT_APP_WS_SCHEME } = process.env;\n\nclass Channel {\n\n  constructor(url) {\n    this.events = {};\n    this._socket = new WebSocket(`${REACT_APP_WS_SCHEME}://${url}`);\n\n    this.tryReconnect = () => {\n      this._socket = new WebSocket(`${REACT_APP_WS_SCHEME}://${url}`);\n    };\n\n    this._socket.onopen = (ev) => {\n      this.events['connection'] && this.events.connection(ev);\n    };\n    this._socket.onclose = (ev) => {\n      this.events['close'] && this.events.close(ev);\n      setTimeout(this.tryReconnect, 1000);\n    };\n    this._socket.onmessage = (ev) => {\n      let { event, data } = JSON.parse(ev.data);\n      this.events[event] && this.events[event](data);\n    }\n  }\n\n  on(event, fn) {\n    this.events[event] = fn;\n  }\n  emmit(event, data) {\n    this._socket.send(JSON.stringify({event,data}));\n  }\n  \n}\n\nexport default Channel","/* Author: Nick Palenchar\n * Feature switch reads environment variables (or .env files) and conditionally renders the content it wraps.\n * If the feature switch is off, the component renders nothing by default, or alternative content if set.\n */\n\nimport React, { Component } from 'react';\n\nclass Feature extends Component {\n\n\n  render() {\n    if (process.env.REACT_APP_ALLFEATURES || process.env[`REACT_APP${this.props.switch}`]) {\n      return <div>{this.props.children}</div>;\n    }\n    else {\n      return this.props.alt || null;\n    }\n  }\n}\n\nexport default Feature;","import React, { Component } from 'react';\nimport { Grommet, Collapsible, Box, Heading, Button } from 'grommet';\nimport { Notification, Menu } from 'grommet-icons';\nimport AceEditor from 'react-ace';\nimport 'brace/theme/crimson_editor';\nimport 'brace/mode/dot'\nimport Channel from './io'\nimport axios from 'axios'\nimport downloadFile from 'js-file-download'\nimport { fetchUrl } from 'fetch'\nimport Feature from './FeatureSwitch';\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '14px',\n      height: '20px',\n    },\n  },\n};\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    { ... props }\n    />\n);\n\nclass App extends Component {\n  state = {\n    showSidebar: false,\n    graphSvg: '',\n  };\n\n  refreshId = null;\n  graphData = `digraph {\n  eat -> sleep\n  sleep -> code\n  code -> eat[label=\"repeat\"]\n}`;\n\n  parseGraph(data) {\n    this.refreshId = null;\n    this.channel.emmit('parseGraph', data);\n  }\n\n  onChange(newValue) {\n    if (!this.refreshId) {\n      this.refreshId = setTimeout(()=>this.parseGraph(newValue),300);\n    }\n    this.graphData = newValue;\n  }\n\n  // GET EDITOR. Created as a \"promise\", i.e. if getting the text is never needed, the editor ref will never instantiate.\n  editor = null;\n  getGraphData() {\n    return this.graphData;\n  }\n\n  sendGraphToExport(graph) {\n    axios({\n      url: `${process.env.REACT_APP_SCHEME}://${process.env.REACT_APP_BACKEND}/api/export`,\n      headers: { 'Content-Type': 'application/json'},\n      data: { data: graph },\n      method: 'POST',\n      responseType: 'blob',\n\n    }).then((response) => {\n      // download the file\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'file.png');\n      document.body.appendChild(link);\n      link.click();\n    });\n  }\n\n  render() {\n    const { showSidebar } = this.state;\n    debugger;\n    this.channel = new Channel(`${process.env.REACT_APP_BACKEND}/ws/dot/anon/`);\n    this.channel.on('connection', () => this.parseGraph(this.graphData));\n    this.channel.on('graphParsed', (data) => {\n      document.querySelectorAll('#dot-output')[0].innerHTML = data;\n    });\n\n    return (\n      <Grommet theme={theme}>\n        <AppBar>\n          v0.0.1-alpha\n          <Heading level='3' margin='none'>Graphviz</Heading>\n          <Button\n            icon={<Menu/>}\n            onClick={()=>this.setState(prevState => ({ showSidebar: !prevState.showSidebar }))} />\n        </AppBar>\n        <Box direction='row' flex overflow={{horizontal: 'hidden'}}>\n          {/*<Box flex align='left' alignContent='left' justify='between' direction='row' pad='small' width='small'>*/}\n            {/*Hello this is another box*/}\n          {/*</Box>*/}\n          <Box flex align='center' alignContent='center' justify='between' direction='row' pad='small'>\n              <AceEditor\n                theme='crimson_editor'\n                mode='dot'\n                fontSize='200'\n                onChange={(newValue) => this.onChange(newValue)}\n                name='dot-input-field'\n                style={{fontSize: '15px'}}\n                width='600px'\n                editorProps={{$blockScrolling: true, fontSize: '18px'}}\n                value={this.graphData}\n                />\n            <Box boarder='all' flex justify='center' direction='row' as='div' id='dot-output'>\n            </Box>\n            <Feature switch='EXPORT_BUTTON'><Button label='Export' onClick={() => this.sendGraphToExport(this.getGraphData())}/></Feature>\n          </Box>\n          <Collapsible direction='horizontal' open={showSidebar}>\n            <Box\n            width='medium'\n            background='light-2'\n            elevation='small'\n            align='center'\n            justify='center'\n          >\n              Hey! Want to <a href='https://github.com/nickpalenchar/graphviz'>contribute</a>?\n          </Box>\n          </Collapsible>\n        </Box>\n      </Grommet>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}